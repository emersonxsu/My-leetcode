class Solution {
public:
    vector<string> findMissingRanges(int A[], int n, int lower, int upper) {
        vector<string> res;
        //if A[] is empty;
        if (n == 0) {
            if (lower == upper) {
                res.push_back(to_string(lower));
                return res;
            } else {
                res.push_back(to_string(lower) + "->" + to_string(upper));      
                return res;
            }
        } else if (n == upper - lower + 1 || lower == upper) {
            //if A[] is full or lower == upper;
            return res; 
        } else if (n == 1) {            // A[] has only one element;
            if (A[0] == lower) {
                 if (upper == lower + 1) {
                    res.push_back(to_string(upper));
                 } else res.push_back(to_string(lower + 1) + "->" + to_string(upper));
            } else if (A[0] > lower) {
                if (A[0] == lower + 1) {
                    res.push_back(to_string(lower));
                } else if (A[0] > lower + 1) {
                    res.push_back(to_string(lower) + "->" + to_string(A[0] - 1));
                    }
                if (A[0] == upper - 1) {
                    res.push_back(to_string(upper));
                } else if (A[0] < upper -1) {
                    res.push_back(to_string(A[0] + 1) + "->" + to_string(upper));
                 }
            }
            return res;
        } else {                        // A[] has at least two elements;
            if (A[0] - lower ==  1) {
                res.push_back(to_string(lower));
            } else if (A[0] - lower > 1) {
                res.push_back(to_string(lower) + "->" + to_string(A[0]-lower-1));
            }
            for (int i = 1; i < n; i++) {
                if (A[i] - A[i-1] == 2) {
                    res.push_back(to_string(A[i-1] + 1));     //some range from first missing number to last one before next element in A[];
                } else if (A[i] - A[i-1] > 2) {
                    res.push_back(to_string(A[i-1] + 1) + "->" + to_string(A[i]-1));
                } else if (A[i] - A[i-1] == 1) continue;
            }
            if (A[n-1] == upper - 1) {
                res.push_back(to_string(upper));
            } else if (A[n-1] < upper - 1) {
                res.push_back(to_string(A[n-1] + 1) + "->" + to_string(upper));
            }
            return res;
        }
    }
};
