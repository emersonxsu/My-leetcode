/* Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/
class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) {
        vector< vector<int> > res;
        res = permuteRecursion(num, 0);
        return res;
    }
    
    vector< vector<int> > permuteRecursion(vector<int> &num, int start) {
        vector< vector<int> > res;
        if (start >= num.size()) {
            res.push_back(num);
            return res;
        }
        for (int i = start; i < num.size(); ++i) {
            swap(num[start], num[i]);
            vector< vector<int> > tmp;
            tmp = permuteRecursion(num, start + 1);
            res.insert(res.end(), tmp.begin(), tmp.end()); 
            swap(num[start], num[i]);
        }
        return res;
    }
};

// I have referred a solution with void recurssive function. That one is simpler.
// Key points: 1) swap() function and remember to reset using 2nd swap().
//             2) concatenate two vectors a and b: a.insert(a.end(), b.begin(), b.end()).
