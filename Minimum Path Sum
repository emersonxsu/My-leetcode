class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        int m = grid.size();
        int n = (m > 0) ? grid[0].size() : 0; 
        vector< vector<int> > dp { { } };
        // initialization for top left entry
        dp[0].push_back(grid[0][0]);
        // initialization for 1st row
        for(int j = 1; j < n; ++j) {
            dp[0].push_back(dp[0][j-1] + grid[0][j]);
        }
        //initialization for 1st column
        for(int i = 1; i < m; ++i) {
            vector<int> tmpC (1, dp[i-1][0] + grid[i][0]);
            dp.push_back(tmpC);
        }
        for(int i = 1; i < m; ++i) {
            for(int j = 1; j < n; ++j) {
                int tmp = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
                dp[i].push_back(tmp);
            }
        }
        return dp[m-1][n-1];
    }
};
