class Solution {
public:
    string getMaximalPalindrome(string s, int left, int right) {
        int j = left, k = right;
        while (j >= 0 && k < s.size() && s[j] == s[k]) {
            j--;
            k++;
        }
        return s.substr(j + 1, k - j - 1);
    }
    
    string longestPalindrome(string s) {
        if (s.size() > 1000) {
            s = s.substr(0, 1000);
        }
        if (s.size() == 1) {
            return s;
        } else {
            string s1, s2, s3, s4;
            for (int i = 0; i < s.size(); ++ i) {
                    s1 = getMaximalPalindrome(s, i, i);
                    s2 = getMaximalPalindrome(s, i, i + 1);
                    s3 = (s1.size() > s2.size()) ? s1 : s2;
                    s4 = (s4.size() > s3.size()) ? s4 : s3;
            }
            return s4;
        }
    }
};
