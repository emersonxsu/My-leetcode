/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
    stack<TreeNode *> stk;
public:
    BSTIterator(TreeNode *root) {
     while (root != nullptr) {
         stk.push(root);
         root = root->left;
     }
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !stk.empty();
    }

    /** @return the next smallest number */
    int next() {
       TreeNode *pTop = stk.top();
       stk.pop();
       TreeNode *p = pTop->right;
       while(p != nullptr) {
           stk.push(p);
           p = p->left;
       }
       return pTop->val;
    }
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
 
 /* 
 in next(), need two TreeNode, pTop and p, use the former one to return its val;
 */
