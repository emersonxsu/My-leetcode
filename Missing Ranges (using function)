class Solution {
public:
    string GetRange(int i, int j) {             // i is inside of A[], j is inside of {lower,..., upper}
       if (i - j == 1 || j - i == 1) {
           return to_string(j);
       } else if (j - i > 1) {
           return to_string(i + 1) + "->" + to_string(j);
       } else if (i - j > 1) {
           return to_string(j) + "->" + to_string(i - 1);
       } 
    }
    
    vector<string> findMissingRanges(int A[], int n, int lower, int upper) {
        vector<string> res;
        if (n == upper - lower + 1) {     // if A[] doesn't miss any number;
            res.clear();
        } else if (n == 0) {            // A[] is empty
            if (lower == upper) {
                res.push_back(to_string(lower));
            } else {
                res.push_back(to_string(lower) + "->" + to_string(upper));        //res[0] = to_string(lower) + "->" + to_string(upper);
            }
        } else if (n == 1) {            // A[] has only one element;
            if (A[0] == lower) {
                res.push_back(GetRange(lower, upper));
            } else if (A[0] == upper) {
                res.push_back(GetRange(upper, lower));
            } else {
                res.push_back(GetRange(A[0], lower));
                res.push_back(GetRange(A[0], upper));
            }
        } else if (n >= 2) {                    // A[] has at least two elements;
            if (A[0] > lower) {
                res.push_back(GetRange(A[0], lower));
            }
            for (int i = 1; i < n; i++) {
               if (A[i] - A[i-1] == 2) {
                    res.push_back(to_string(A[i-1] + 1));     //some range from first missing number to last one before next element in A[];
                } else if (A[i] - A[i-1] > 2) {
                    res.push_back(to_string(A[i-1] + 1) + "->" + to_string(A[i]-1));
                } else if (A[i] - A[i-1] == 1) continue;
            }
            if (A[n-1] < upper) {
                res.push_back(GetRange(A[n-1], upper));
            }
        }
        return res;
    }
};
